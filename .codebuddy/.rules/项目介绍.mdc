# 项目介绍

## 项目概述
这是一个基于TypeScript + React Router v7 + shadcn/ui + Tailwind CSS+Zustand的React前端项目
## 技术栈
TypeScript + React Router v7 + shadcn/ui + Tailwind CSS+Zustand的React
### 核心框架和库

- **React 19**: 用于构建用户界面的JavaScript库
- **TypeScript**: 添加静态类型检查的JavaScript超集
- **Vite**: 现代化的前端构建工具，提供快速的开发体验
- **React Router**: 用于处理应用程序的路由
- **Zustand**: 轻量级状态管理库，用于管理应用状态

### UI组件和样式

- **Shadcn UI**: 基于Radix UI的组件集合，提供了可定制的UI组件
- **Tailwind CSS**: 实用优先的CSS框架，用于快速构建自定义设计
- **Radix UI**: 提供无样式、可访问的UI组件
- **Lucide React**: 提供简洁的图标集

### 表单和验证

- **React Hook Form**: 用于表单处理和验证
- **Zod**: TypeScript优先的模式验证库

### 开发工具

- **ESLint**: 代码质量检查工具
- **TypeScript ESLint**: TypeScript的ESLint插件

## 项目结构

```
├── src/                  # 源代码目录
│   ├── App.tsx           # 应用程序主组件
│   ├── main.tsx          # 应用程序入口文件
│   ├── vite-env.d.ts     # Vite环境类型声明
│   ├── assets/           # 静态资源文件
│   │   └── react.svg     # React图标
│   ├── components/       # 组件目录
│   │   ├── theme-provider.tsx  # 主题提供者组件
│   │   ├── theme-toggle.tsx    # 主题切换组件（带圆形扩散动画）
│   │   ├── blog/         # 博客相关组件
│   │   │   ├── article-card.tsx      # 文章卡片组件
│   │   │   ├── blog-footer.tsx       # 博客页脚组件
│   │   │   ├── blog-header.tsx       # 博客头部组件（含响应式导航）
│   │   │   ├── blog-sidebar.tsx      # 博客侧边栏组件
│   │   │   ├── markdown-renderer.tsx # Markdown渲染组件
│   │   │   └── simple-markdown.tsx   # 简化Markdown组件
│   │   ├── layout/       # 布局组件
│   │   │   ├── blog-layout.tsx       # 博客布局组件
│   │   │   └── mode-toggle.tsx       # 模式切换组件
│   │   └── ui/           # UI基础组件（shadcn/ui组件集合）
│   │       ├── accordion.tsx         # 手风琴组件
│   │       ├── alert-dialog.tsx      # 警告对话框组件
│   │       ├── alert.tsx             # 警告组件
│   │       ├── avatar.tsx            # 头像组件
│   │       ├── badge.tsx             # 徽章组件
│   │       ├── button.tsx            # 按钮组件
│   │       ├── card.tsx              # 卡片组件
│   │       ├── dialog.tsx            # 对话框组件
│   │       ├── dropdown-menu.tsx     # 下拉菜单组件
│   │       ├── input.tsx             # 输入框组件
│   │       ├── label.tsx             # 标签组件
│   │       ├── navigation-menu.tsx   # 导航菜单组件
│   │       ├── scroll-area.tsx       # 滚动区域组件
│   │       ├── separator.tsx         # 分隔符组件
│   │       ├── sheet.tsx             # 抽屉组件
│   │       ├── skeleton.tsx          # 骨架屏组件
│   │       ├── tabs.tsx              # 标签页组件
│   │       └── ...                   # 其他UI组件
│   ├── hooks/            # 自定义React钩子
│   │   ├── api/          # API请求钩子目录
│   │   └── use-mobile.ts # 移动设备检测钩子
│   ├── lib/              # 工具函数和库
│   │   ├── simple-post-loader.ts # 简单文章加载器
│   │   └── utils.ts      # 通用工具函数
│   ├── pages/            # 页面组件
│   │   ├── About.tsx     # 关于页面
│   │   ├── Archive.tsx   # 归档页面
│   │   ├── ArticleDetail.tsx # 文章详情页面
│   │   ├── ArticleList.tsx   # 文章列表页面
│   │   ├── BlogHome.tsx      # 博客首页
│   │   ├── Categories.tsx    # 分类页面
│   │   ├── HelloWorld.tsx    # 示例页面
│   │   ├── Search.tsx        # 搜索页面
│   │   ├── Tags.tsx          # 标签页面
│   │   └── TestPost.tsx      # 测试文章页面
│   ├── posts/            # Markdown文章目录
│   │   ├── 云计算与容器化.md
│   │   ├── 前端性能优化.md
│   │   ├── 区块链技术入门.md
│   │   ├── 如何搭建个人博客.md
│   │   ├── 数据结构与算法.md
│   │   ├── 微服务架构设计.md
│   │   ├── React-18-新特性详解.md
│   │   ├── TypeScript-高级类型系统.md
│   │   ├── Docker-容器化部署.md
│   │   ├── Kubernetes-容器编排.md
│   │   └── ...           # 更多技术文章
│   ├── routes/           # 路由配置
│   │   ├── blog-routes.tsx   # 博客路由配置
│   │   └── routes.tsx        # 主路由定义文件
│   ├── store/            # 状态管理（Zustand）
│   │   ├── blog-store.ts     # 博客状态管理
│   │   ├── counter-store.ts  # 计数器状态管理
│   │   └── theme-store.ts    # 主题状态管理
│   ├── styles/           # 样式文件
│   │   ├── App.css       # 应用程序样式
│   │   └── index.css     # 全局样式（含Tailwind CSS）
│   └── types/            # TypeScript类型定义
│       ├── blog.ts       # 博客相关类型定义
│       ├── components.ts # 组件类型定义
│       └── index.ts      # 通用类型定义
├── public/               # 公共静态资源
│   └── vite.svg          # Vite图标
├── rule/                 # 项目规则和文档
│   ├── rule.md           # 项目规则文档
│   ├── 前端代码注释规则.md  # 前端代码注释规范
│   ├── 前端页面设计规则.md  # 前端页面设计规范
│   ├── 文件命名规则.md     # 文件命名规范
│   └── 后端api接口文档/    # 后端API接口文档
│       └── 接口统一响应文档.md
├── .gitignore            # Git忽略文件配置
├── components.json       # shadcn/ui组件配置
├── eslint.config.js      # ESLint配置文件
├── index.html            # HTML入口文件
├── package.json          # 项目依赖和脚本配置
├── pnpm-lock.yaml        # pnpm锁定文件
├── tsconfig.json         # TypeScript主配置
├── tsconfig.app.json     # TypeScript应用配置
├── tsconfig.node.json    # TypeScript Node配置
└── vite.config.ts        # Vite配置文件
```

## 主要功能

### 状态管理

项目使用Zustand进行状态管理，包括：

- **主题状态管理**: 支持亮色、暗色和系统主题
- **计数器状态管理**: 简单的计数器示例，展示Zustand的基本用法

### 路由管理

使用React Router进行路由管理，支持嵌套路由和动态路由。

### 组件系统

项目采用组件化开发方式，组件分为以下几类：

- **功能组件**: 实现特定业务功能的组件
- **布局组件**: 处理页面布局的组件
- **UI组件**: 基础UI组件，如按钮、卡片等

## 开发指南

### 安装依赖

```bash
pnpm install
```

### 启动开发服务器

```bash
pnpm dev
```

### 构建项目

```bash
pnpm build
```

### 代码检查

```bash
pnpm lint
```

## 最佳实践

1. 使用TypeScript类型定义确保代码类型安全
2. 遵循组件化开发原则，保持组件的单一职责
3. 使用Zustand进行状态管理，避免过度使用全局状态
4. 使用Tailwind CSS进行样式开发，保持样式的一致性
5. 遵循ESLint规则，保持代码质量